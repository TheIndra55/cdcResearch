:toc2:

Relocations
-----------

Relocations are found in DRM sections and are at the start of the data. Relocations are used to patch offsets in the data to point to the actual memory at runtime.

For example in the section data there is a `char*` pointing to a string later in the file, in the file it will be the offset but at runtime that offset will be pointing to the wrong memory. So the relocations will tell the game which locations to patch to append the base pointer. Relocations can also point to other sections.

Format
~~~~~~

In the templates folder there is a link:templates/relocations.bt[template] for 010 Editor to read this data.

image:images/relocations.png[]

Above an example, in green the section header and in red the relocations. At offset 12 in the section header there is a bitfield, the last 24 bits (packetData >> 8) is the number of relocations in this file.

Using relocations
~~~~~~~~~~~~~~~~~

If you have data pointing to an offset in the file for example in game's Model struct
[source,cpp]
----
struct Model
{
...
TextureStripInfo* textureStripInfo;
...
}
----

textureStripInfo will likely be set to offset of the TextureStripInfo struct so e.g. 462 but that pointer will not be valid in memory.

So create or modify a relocation and set its offset to the location of your pointer in the file subtracting the section header and relocation (so start counting after the relocation). Now when the game reads the section it will read the value at the offset or your relocation and add the base pointer of the section data to it (base pointer + 462), and then write that value back so its a valid pointer in memory.

sectionIndexOrType
~~~~~~~~~~~~~~~~~~

In the Relocation structure there is a member sectionIndexOrType if the relocation type is 0 this is the section to use as base pointer e.g. a pointer could be pointing to an offset in another section.

Relocation type
~~~~~~~~~~~~~~~

TODO
