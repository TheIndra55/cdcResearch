:toc2:

Scripts
-------

Scripts control the level flow of a unit, they control the doors, switches, cinematics, traps and more. Scripts are native executable files (PE on Windows/PS2 and ELF in the Wii version) loaded by the game which then calls certain symbols such as EventMain.

The script files can be found by looking at relocation for the relocModule member of the Level struct, this will give you the right section. Since they are just normal x86 instructions you can easily disassemble/decompile them in Ghidra or IDA Pro.

Exports
~~~~~~~

The following symbols are usually exported from script

* EventMain
* EventRelocate
* CallTrigger
* IsTriggerActive
* EventDebug

The `EventMain` function will be called from the game loop every loop, this is where most of the logic is. 
**a3** is a pointer to a table where functions and variables are stored for the scripts.

[source,cpp]
----
int EventMain(GameTracker* a1, StreamUnit* a2, GlobalData* a3)
{

}
----

The last `EventDebug` is not a function but instead array of debug strings, this is unused by the game.
[source,cpp]
----
// from pu1
char* EventDebug[8] = { "doorsopened", "pusha", 
                        "pushb", "introcine", 
                        "tutorial_start", "doorreveala", 
                        "level_title_start", "sherpasilent" };
                        // [...]
----

Writing scripts
~~~~~~~~~~~~~~~

You can write scripts in every language which compiles to x86 like C/C++ or Assembly, note though that you cannot use imports such as winapi functions instead you have to use the functions from the **a3** parameter.

Scripts must always export 2 symbols `EventMain` and `EventRelocate`.

[source,cpp]
----
void EventMain(int a1, int a2, GlobalData* a3)
{
	// called every gameloop
}

int EventRelocate()
{
	return 0;
}
----

You can put all your logic in EventMain and it will run every game loop. See link:level.asc[level] for applying scripts to level.

C example
^^^^^^^^^

The following example looks for a lever with intro 4 and door with intro 3237, if the level is pulled the door will open. link:https://www.youtube.com/watch?v=L5SP9EPGs2o[video]

[source,cpp]
----
#include <stdbool.h>

typedef Instance;

typedef struct
{
	char pad1[236];
	unsigned int(__cdecl* INSTANCE_Query)(Instance*, unsigned int);
	void(__cdecl* INSTANCE_Post)(Instance*, int, int);
	char pad2[8];
	Instance* (__cdecl* INSTANCE_Find)(int);
	char pad3[272];
	void(__cdecl* EVENT_DisplayString)(char*, int);
} GlobalData;

typedef struct
{
	bool door_opened;
} State;

State state;

void EventMain(int a1, int a2, GlobalData* a3)
{
	// called every gameloop

	if (!state.door_opened)
	{
		// find the lever instance by intro 4
		Instance* lever = a3->INSTANCE_Find(4);

		// query the lever until the lever is pulled
		if (lever && a3->INSTANCE_Query(lever, 233) == 1)
		{
			// in the game this is a nullsub, but this function is hooked by TRAE-menu-hook to still show
			a3->EVENT_DisplayString("print from script", 60);
			
			// find door by intro 3237
			Instance* door = a3->INSTANCE_Find(3237);
			
			// post the door to open
			a3->INSTANCE_Post(door, 8388753, 1);

			state.door_opened = true;
		}
	}
}

int EventRelocate()
{
	return 0;
}
----

To compile run the following in a x86 visual studio command prompt.

[source,bash]
----
cl script.c /LD /link /NOENTRY /DLL /NODEFAULTLIB /EXPORT:EventMain /EXPORT:EventRelocate /OUT:container1.dll
----

MASM example
^^^^^^^^^^^^

Example below is a script written in Microsoft Assembler which will call `EVENT_DisplayString` every loop.

[source,asm]
----
.386
.model flat, C

.data

print db 'print from script', 0

.code

EventMain proc EXPORT a1: DWORD, a2: DWORD, a3: DWORD
    mov ecx, a3
    mov edx, [ecx+528] ; EVENT_DisplayString
	
    lea ebx, print
	
    push 60            ; time
    push ebx           ; message to display
    call edx

    mov eax, a3
    ret
EventMain endp

EventRelocate proc EXPORT
    mov eax, 0
    ret
EventRelocate endp

end
----

To compile run the following in a x86 visual studio command prompt.

[source,bash]
----
ml script.asm /link /NOENTRY /DLL /OUT:container1.dll
----
