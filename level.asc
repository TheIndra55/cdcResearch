:toc2:

Level
-----

When unpacking a level drm one of the first .gnc files will contain the level section, this section contains the `Level` structs, all intros, a list of object to load and more. In `container1` unit this file is 0_0.gnc.

The file starts like any other section with the `SectionInfo` header, after that link:relocations.asc[relocations] and after that the `Level` struct starts.

image:images/level.png[]

*Green*: SectionInfo
*Red*: Relocations
*Yellow*: Intros
*Blue*: objectNameList

The template for this file is inside the templates folder as link:templates/level.bt[level.bt]. SectionInfo and Relocations are explained in link:relocations.asc[Relocations] the rest is below.

Intros
~~~~~~

The intros array is a list of all instances which are born when the level is loaded, These intros contain position, rotation, scale, objectId, introId etc. The intro id is the unique id to find the intro, this can be used to find the right instance from a script to query its status.

The intro list is referenced to from the `Level` struct, loop trough `numIntros` at the padding of `introList` (make sure to add offset from SectionInfo/Relocations) and you will get all intros.
[source,cpp]
----
struct Level {
	...
	int numIntros;
	uint32 introList;
----

The full struct for the intros is in the level.bt template above, the interesting fields we want below.
[source,cpp]
----
struct Intro {
	cdcVector rotation;
	cdcVector position;
	...
	uint16 objectID; // this is the id of the object, see default\trae\pc-w\objectlist.txt for all objects and their id
	...
	uint32 UniqueID; // this is the unique intro id
----

In container1 these will be autorifle_rbweapon and the shotgun, we can replace these with our own objects for example replace them with `dr_pu__batcave_slidingdoor` and `sw_gr_floorswitch`. Find the object ids and replace the hex with them. You can change the unique id too if you like for example to 3237.

**Note** If you change or add new intros make sure to modify the objectNameList too else they won't load.

image:images/intros.png[width=500]

objectNameList
~~~~~~~~~~~~~~

In the `Level` struct there is also a member objectNameList, this is a pointer to a null-terminated list of int16 ids to insert into the `GlobalObjects` array. If your object is not in the `GlobalObjects` the game will not birth the instance.

[source,cpp]
----
struct Level {
	...
	uint32 objectNameList;
----

Script
~~~~~~

Every level contains a script too, these are executable files exporting functions called by the game. You can read more about scripts in link:scripts.asc[Scripts].

You can compile your own script for the game by writing bunch of C code exporting 2 functions.
[source,cpp]
----
int EventMain(int a1, int a2, int a3)
{
	// called every gameloop

	return a3;
}

int EventRelocate()
{
	return 0;
}
----

The script has no entry point and therefore has to be compiled without CRT, open the "x86 Native Tools Command Prompt for VS" and build your code with the following compiler/linker options.

[source,bash]
----
cl script.c /LD /link /NOENTRY /NODEFAULTLIB /EXPORT:EventMain /EXPORT:EventRelocate /OUT:container1.dll
----

open the old script (1_0.gnc for container1) with your favorite hex editor and copy the SECT header from cdcEngineTools (24 bytes) and keep it somewhere, now replace the script with your dll and append the old SECT header in front of it.

[source,hexdump]
----
00000000  53 45 43 54 00 40 00 00 00 00 00 00 00 00 00 00  SECT.@..........
00000010  00 00 00 00 FF FF FF FF 4D 5A                    ....每每每每MZ
----

The first 4 bytes is the SECT magic, the next 4 bytes is the length of the section data. Take the length of your dll without the SECT header and write it at those 4 bytes. The last 2 bytes in this hexdump is the MZ magic from your dll this is the section data and thuss the script.

If you get an error from game "Error relocating module code -1" this is due the game checking all sections, if one section has a larger virtual size than raw size it will return -1. Easiest solution open the file in https://ntcore.com/?page_id=388[CFF Explorer] and edit from any empty sections the virtual size from 00000001 to 00000000.

image:images/sections.png[]

Repeat the same steps above and now the game will load the unit fine.

MarkUp
~~~~~~

MarkUp is used to mark spots in the level as stuff such as ledges, poles, ladders. You can add MarkUp by increasing the `numMarkUps` and setting `markupList` to a valid offset pointing to an array with the Markup struct. (don't forget to add your relocations)

[source,cpp]
----
struct Level {
	...
	int numMarkUps;
	uint32 markupList;
----

In your MarkUp set the flags, position, markupID etc and point polyLine to a valid polyline structure (again don't forget relocations). For a list of all flags see link:https://github.com/TheIndra55/TRAE-menu-hook/blob/master/Game.hpp#L187[here] and the polyline structure looks like this.
[source,cpp]
----
struct PolyLine {
	int numPoints;
	cdc::Vector point[numPoints];
}
----

So in your file you will be having a vector (4 floats) for every numPoints. Each point will be a segment in the line, the game will take care of the animations for walls or hanging and climbing around corners see link:https://www.youtube.com/watch?v=wwYkW2KWn7Y[this] video.

image:images/markup.png[width=500]

MarkUp added to container1 level (note the lines is not part of the game but instead a link:https://github.com/TheIndra55/TRAE-menu-hook[TRAE-Menu-Hook] feature).

Water MarkUp
^^^^^^^^^^^^

To add water to your level you will need both water MarkUp and an intro with the `watervolume` object. Start by adding a new MarkUp and set the `MUD_FLAG_INSTANCE` and `MUD_FLAG_WATER` flags, set introID to the id of your watervolume object intro.

To define the size of your water set the `bbox` member in your markup to coordinates of both borders of your watervolume.

image:images/water.png[width=500]

To add flowing water you need to set the `data` member of your water intro, point it to a struct (dont forget relocations) where you set the `IntroData` type.

[source,cpp]
----
struct IntroData
{
    int type;
	// data
};
----

Type should be 13 for WaterVolumeIntroData. Now add your `WaterVolumeIntroData` data right after the `IntroData` struct, 4 members are important `flowRadius`, `waterDepth`, `waterInflow`, `waterOutflow`.

`waterDepth` is the height of the water, without WaterVolumeIntroData this will always be the highest point of your box but with the intro data you need to explicitly define it. +
`waterSpeed` is the speed of your flowing water.

To define from where to where the water should flow you need to add 2 extra intros, each of those intros need to be objectID `-6` and the position should be the position of your in/out flow. Now set the `waterInflow` and `waterOutflow` both to the intro number of your in/out flow intros. If you did all you should have flowing water from inFlow to outflow, as example also see link:https://www.youtube.com/watch?v=b3sjmDiq8BE[this] video

Collision mesh
~~~~~~~~~~~~~~

Each TerrainGroup can contain a collision mesh, this is a simple mesh used for the collision of the level. This mesh is not visible or has any textures.

image:images/collision.png[height=200]

The first member of the Mesh struct is `m_box` this is the border of your mesh, make sure to make it the same size of bigger than you vertice positions else the collision won't work past its border. `m_position` is the position of the collision in the world.

To define the collision mesh use `m_vertices` and `m_faces`, the `m_vertices` points to an array of structs each for one vertice. The vertice consists of 3 x, y, z coordinates as `int16`. When adding faces make sure to update `m_root` faces count else your faces won't work and you will fall trough your collision.

[source,cpp]
----
struct Vertex
{
    __int16 x;
    __int16 y;
    __int16 z;
}

struct IndexedFace
{
    unsigned int16 i0;
    unsigned int16 i1;
    unsigned int16 i2;
    __int8 adjacencyFlags;
    __int8 collisionFlags;
    __int8 clientFlags;
    __int8 materialType;
}
----
