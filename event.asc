:toc2:

Event
-----

The event system is used to control the level flow, these consist of event blocks with logic e.g. querying a lever. In SR2 and later these events are stored as native code, before that they were stored as bytecode named ScriptPCode (source: AesirHod).

The location where this native code is stored differs per platform, usually they are stored as executable (PE/DLL or ELF) in the level drm.

[cols="30%,70%"]
|===

|PC, PS2, PSP
|Stored as PE/DLL files in the level drm

|Wii
|Stored as ELF file in level drm (contains function symbols)

|Mac
|Included in main executable together with game code (maybe cause Apple doesn't allow W^X?)

|PS3
|Stored as SPRX file in seperate modules folder next to the game executable (eg.sprx, gr.sprx)

|===

Exports
~~~~~~~

On most platforms the files where the event code is stored in expose several exports used by the game, such as.

* EventMain
* EventDebug
* EventRelocate
* CallTrigger
* IsTriggerActive

EventMain
^^^^^^^^^

This is the function which is exposed to the game, the game will call this function every loop which will then call all events. The call structure is usually like this:

image:images/eventgraph.png[]

EventDebug
^^^^^^^^^^

This export exposes names for variables and eventvars of the level. It contains every eventvar used in the script and its number.

[source,cpp]
----
struct EventVar
{
    char* name;
    int offset; // offset in the save eventvars arrau
};

struct UnsavedVar
{
    char* name;
    int* var; // pointer to the variable
};

// both are null terminated
struct EventDebug
{
	EventVar eventVars[]
	UnsavedVar unsavedVars[]
}
----

Writing scripts
~~~~~~~~~~~~~~~

For platforms like PC where the native code can be easily replaced by recompiling a DLL and replacing the section you can write your own level flow. You can do so in any language which compiles to x86 like C/C\++ or Assembly, note though you cannot use WinAPI functions or anything requiring to link/import a dll (e.g. C++ standard library).

You don't have to adhere the orginal event structure since game only calls the EventMain function, though you must always export 2 symbols `EventMain` and `EventRelocate`.

[source,cpp]
----
void EventMain(GameTracker* gameTracker, StreamUnit* unit, GlobalData* globalData)
{
	// called every gameloop, put your logic here
}

void EventRelocate()
{
	return;
}
----

You can put all your logic in EventMain and it will run every game loop. See link:level.asc[level] for applying scripts to level.

C example
^^^^^^^^^

The following example looks for a lever with intro 4 and door with intro 3237, if the level is pulled the door will open. link:https://www.youtube.com/watch?v=L5SP9EPGs2o[video]

[source,cpp]
----
#include <stdbool.h>

typedef Instance;

typedef struct
{
	char pad1[236];
	unsigned int(__cdecl* INSTANCE_Query)(Instance*, unsigned int);
	void(__cdecl* INSTANCE_Post)(Instance*, int, int);
	char pad2[8];
	Instance* (__cdecl* INSTANCE_Find)(int);
	char pad3[272];
	void(__cdecl* EVENT_DisplayString)(char*, int);
} GlobalData;

typedef struct
{
	bool door_opened;
} State;

State state;

void EventMain(int a1, int a2, GlobalData* a3)
{
	// called every gameloop

	if (!state.door_opened)
	{
		// find the lever instance by intro 4
		Instance* lever = a3->INSTANCE_Find(4);

		// query the lever until the lever is pulled
		if (lever && a3->INSTANCE_Query(lever, 233) == 1)
		{
			// in the game this is a nullsub, but this function is hooked by TRAE-menu-hook to still show
			a3->EVENT_DisplayString("print from script", 60);
			
			// find door by intro 3237
			Instance* door = a3->INSTANCE_Find(3237);
			
			// post the door to open
			a3->INSTANCE_Post(door, 8388753, 1);

			state.door_opened = true;
		}
	}
}

int EventRelocate()
{
	return 0;
}
----

To compile run the following in a x86 visual studio command prompt.

[source,bash]
----
cl script.c /LD /link /NOENTRY /DLL /NODEFAULTLIB /EXPORT:EventMain /EXPORT:EventRelocate /OUT:container1.dll
----

MASM example
^^^^^^^^^^^^

Example below is a script written in Microsoft Assembler which will call `EVENT_DisplayString` every loop.

[source,asm]
----
.386
.model flat, C

.data

print db 'print from script', 0

.code

EventMain proc EXPORT a1: DWORD, a2: DWORD, a3: DWORD
    mov ecx, a3
    mov edx, [ecx+528] ; EVENT_DisplayString
	
    lea ebx, print
	
    push 60            ; time
    push ebx           ; message to display
    call edx

    mov eax, a3
    ret
EventMain endp

EventRelocate proc EXPORT
    mov eax, 0
    ret
EventRelocate endp

end
----

To compile run the following in a x86 visual studio command prompt.

[source,bash]
----
ml script.asm /link /NOENTRY /DLL /OUT:container1.dll
----
